components:
  schemas:
    CommonMeta:
      description: Common meta class for Pydantic models
      properties:
        created_at:
          description: Created at
          format: date-time
          title: Created At
          type: string
        created_by:
          description: Created by
          title: Created By
          type: string
        tags:
          default: []
          description: Tags
          items:
            type: string
          title: Tags
          type: array
        updated_at:
          description: Updated at
          format: date-time
          title: Updated At
          type: string
        updated_by:
          description: Updated by
          title: Updated By
          type: string
      required:
      - created_by
      - updated_by
      title: CommonMeta
      type: object
    Cpu:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        limit:
          default: 200m
          description: CPU limit
          title: Limit
          type: string
        request:
          default: 100m
          description: CPU request
          title: Request
          type: string
        target:
          default: 80
          description: CPU target usage
          maximum: 99.0
          minimum: 1.0
          title: Target
          type: integer
      title: Cpu
      type: object
    Deployment:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        replicas:
          allOf:
          - $ref: '#/components/schemas/Replicas'
          default:
            max: 1
            min: 1
          description: Replicas
          title: Replicas
        resources:
          allOf:
          - $ref: '#/components/schemas/Resources'
          default:
            cpu:
              limit: 200m
              request: 100m
              target: 80
            memory:
              limit: 2000Mi
              request: 1000Mi
              target: 80
          description: Registry
          title: Resources
      title: Deployment
      type: object
    DeploymentPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        replicas:
          allOf:
          - $ref: '#/components/schemas/Replicas'
          description: Replicas
          title: Replicas
        resources:
          allOf:
          - $ref: '#/components/schemas/ResourcesPatch'
          description: Registry
          title: Resources
      title: DeploymentPatch
      type: object
    Details:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        prefix:
          description: Pool prefix
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Prefix
          type: string
        routing:
          allOf:
          - $ref: '#/components/schemas/Routing'
          default:
            shadows: []
            targets: []
          description: Routing details
          title: Routing
        tests:
          allOf:
          - $ref: '#/components/schemas/schemas__pool__Test'
          default: {}
          description: Pool tests
          title: Tests
      title: Details
      type: object
    DetailsPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        prefix:
          description: Pool prefix
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Prefix
          type: string
      title: DetailsPatch
      type: object
    DetailsPut:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        prefix:
          description: Pool prefix
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Prefix
          type: string
      title: DetailsPut
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    Memory:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        limit:
          default: 2000Mi
          description: Memory limit
          title: Limit
          type: string
        request:
          default: 1000Mi
          description: Memory request
          title: Request
          type: string
        target:
          default: 80
          description: Memory target usage
          maximum: 99.0
          minimum: 1.0
          title: Target
          type: integer
      title: Memory
      type: object
    MlflowServer:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: Mlflow Server ID
          title: ' Id'
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Mlflow Server metadata
          title: Meta
        name:
          description: Mlflow Server name
          title: Name
          type: string
        url:
          description: Mlflow Server URL
          title: Url
          type: string
      required:
      - name
      - url
      - meta
      title: MlflowServer
      type: object
    MlflowServerPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        meta:
          tags:
          - string
          - string
        name: string
        url: string
      properties:
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__mlflow_server__Meta'
          description: Mlflow Server metadata
          title: Meta
        name:
          description: Mlflow Server name
          title: Name
          type: string
        url:
          description: Mlflow Server URL
          title: Url
          type: string
      title: MlflowServerPatch
      type: object
    MlflowServerPut:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        meta:
          tags:
          - string
          - string
        name: string
        url: string
      properties:
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__mlflow_server__Meta'
          description: Mlflow Server metadata
          title: Meta
        name:
          description: Mlflow Server name
          title: Name
          type: string
        url:
          description: Mlflow Server URL
          title: Url
          type: string
      required:
      - name
      - url
      title: MlflowServerPut
      type: object
    Model:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: Model ID
          title: ' Id'
          type: string
        description:
          description: General model description
          title: Description
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Model meta
          title: Meta
        name:
          description: Model name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
        tests:
          allOf:
          - $ref: '#/components/schemas/schemas__model__Test'
          default: {}
          description: Test
          title: Tests
        versions:
          default: []
          description: Model versions
          items:
            $ref: '#/components/schemas/ModelVersion'
          title: Versions
          type: array
      required:
      - name
      - description
      - meta
      title: Model
      type: object
    ModelGet:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: Model ID
          title: ' Id'
          type: string
        description:
          description: Model description
          title: Description
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Model metadata
          title: Meta
        name:
          description: Model name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
        versions:
          description: Model versions
          items:
            $ref: '#/components/schemas/ModelVersion'
          title: Versions
          type: array
      required:
      - name
      - description
      - versions
      - meta
      title: ModelGet
      type: object
    ModelPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        description: Model description
        meta:
          tags:
          - tag1
          - tag2
          - tag3
        name: model-1
      properties:
        description:
          description: Model description
          title: Description
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__model__Meta'
          description: Model meta
          title: Meta
        name:
          description: Model name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
      title: ModelPatch
      type: object
    ModelPut:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        deployment:
          replicas:
            max: 3
            min: 1
          resources:
            cpu:
              limit: 200m
              request: 100m
              target: 80
            memory:
              limit: 2000Mi
              request: 1000Mi
              target: 80
        description: Model description
        meta:
          tags:
          - tag1
          - tag2
          - tag3
        name: model-1
        registry:
          artifact_uri: mlflow-artifacts:/0/000/artifacts/model
          id: 64b2c1b9f4b43e8e48b0d3af
        version: 1.0.0
      properties:
        deployment:
          allOf:
          - $ref: '#/components/schemas/Deployment'
          default:
            replicas:
              max: 1
              min: 1
            resources:
              cpu:
                limit: 200m
                request: 100m
                target: 80
              memory:
                limit: 2000Mi
                request: 1000Mi
                target: 80
          description: Deployment
          title: Deployment
        description:
          description: Model description
          title: Description
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__model__Meta'
          default:
            tags: []
          description: Model meta
          title: Meta
        name:
          description: Model name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
        registry:
          allOf:
          - $ref: '#/components/schemas/Registry'
          default: {}
          description: Registry
          title: Registry
        version:
          description: Model version
          pattern: ^\d+\.\d+\.\d+$
          title: Version
          type: string
      required:
      - name
      - version
      - description
      title: ModelPut
      type: object
    ModelStatus:
      description: An enumeration.
      enum:
      - inactive
      - built
      - building
      - build_failed
      - pushed
      - pushing
      - push_failed
      - deployed
      - deploying
      - deploy_failed
      - deactivating
      - deactivation_failed
      title: ModelStatus
      type: string
    ModelVersion:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        deployment:
          allOf:
          - $ref: '#/components/schemas/Deployment'
          default:
            replicas:
              max: 1
              min: 1
            resources:
              cpu:
                limit: 200m
                request: 100m
                target: 80
              memory:
                limit: 2000Mi
                request: 1000Mi
                target: 80
          description: Deployment
          title: Deployment
        description:
          description: Model version description
          title: Description
          type: string
        error:
          description: Model error
          title: Error
          type: string
        image_tag:
          description: Image tag
          title: Image Tag
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Model meta
          title: Meta
        registry:
          allOf:
          - $ref: '#/components/schemas/Registry'
          default: {}
          description: Registry
          title: Registry
        status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          default: inactive
          description: Model status
        version:
          description: Model version
          pattern: ^\d+\.\d+\.\d+$
          title: Version
          type: string
      required:
      - version
      - description
      - meta
      title: ModelVersion
      type: object
    ModelVersionPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        deployment:
          replicas:
            max: 3
            min: 1
          resources:
            cpu:
              limit: 200m
              request: 100m
              target: 80
            memory:
              limit: 2000Mi
              request: 1000Mi
              target: 80
        description: Model version description
        registry:
          artifact_uri: mlflow-artifacts:/0/000/artifacts/model
          id: 64b2c1b9f4b43e8e48b0d3af
        version: 1.0.0
      properties:
        deployment:
          allOf:
          - $ref: '#/components/schemas/DeploymentPatch'
          description: Deployment
          title: Deployment
        description:
          description: Model version description
          title: Description
          type: string
        registry:
          allOf:
          - $ref: '#/components/schemas/Registry'
          description: Registry
          title: Registry
        version:
          description: Model version
          pattern: ^\d+\.\d+\.\d+$
          title: Version
          type: string
      title: ModelVersionPatch
      type: object
    Pool:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: Model ID
          title: ' Id'
          type: string
        description:
          description: Pool description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/Details'
          default:
            routing:
              shadows: []
              targets: []
            tests: {}
          description: Pool details
          title: Details
        error:
          description: Pool error
          title: Error
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Pool metadata
          title: Meta
        name:
          description: Pool name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/PoolStatus'
          default: inactive
          description: Pool status
      required:
      - name
      - description
      - meta
      title: Pool
      type: object
    PoolModelGet:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        shadows:
        - description: model_description
          model_id: '1'
          name: model_name
          version: 1.0.0
        targets:
        - description: model_description
          model_id: '1'
          name: model_name
          prefix: model_name
          version: 1.0.0
          weight: 50
      properties:
        shadows:
          default: []
          description: Routing shadows
          items:
            $ref: '#/components/schemas/ShadowsGet'
          title: Shadows
          type: array
        targets:
          default: []
          description: Routing targets
          items:
            $ref: '#/components/schemas/TargetsGet'
          title: Targets
          type: array
      title: PoolModelGet
      type: object
    PoolModelPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        shadows:
        - model_id: '1'
        targets:
        - model_id: '1'
          prefix: model_name
          weight: 50
      properties:
        shadows:
          default: []
          description: Routing shadow
          items:
            $ref: '#/components/schemas/ShadowsModel'
          title: Shadows
          type: array
        targets:
          default: []
          description: Routing targets
          items:
            $ref: '#/components/schemas/TargetsModel'
          title: Targets
          type: array
      title: PoolModelPatch
      type: object
    PoolPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        description: pool_description
        details:
          prefix: pool_name
        meta:
          tags:
          - example
        name: pool-name
      properties:
        description:
          description: Pool description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/DetailsPatch'
          description: Pool details
          title: Details
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__pool__Meta'
          description: Pool tags
          title: Meta
        name:
          description: Pool name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
      title: PoolPatch
      type: object
    PoolPut:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        description: pool_description
        details:
          prefix: pool_name
        meta:
          tags:
          - example
        name: pool-name
      properties:
        description:
          description: Pool description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/DetailsPut'
          default: {}
          description: Pool details
          title: Details
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__pool__Meta'
          default:
            tags: []
          description: Pool tags
          title: Meta
        name:
          description: Pool name
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Name
          type: string
      required:
      - name
      - description
      title: PoolPut
      type: object
    PoolStatus:
      description: An enumeration.
      enum:
      - inactive
      - deployed
      - deploying
      - deploy_failed
      - deactivating
      - deactivation_failed
      title: PoolStatus
      type: string
    Registry:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        artifact_uri:
          description: Registry artifact uri
          title: Artifact Uri
          type: string
        id:
          description: Registry id
          title: Id
          type: string
      title: Registry
      type: object
    Replicas:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        max:
          default: 1
          description: Maximum number of replicas
          minimum: 1.0
          title: Max
          type: integer
        min:
          default: 1
          description: Minimum number of replicas
          minimum: 1.0
          title: Min
          type: integer
      title: Replicas
      type: object
    Resources:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        cpu:
          allOf:
          - $ref: '#/components/schemas/Cpu'
          default:
            limit: 200m
            request: 100m
            target: 80
          description: CPU details
          title: Cpu
        memory:
          allOf:
          - $ref: '#/components/schemas/Memory'
          default:
            limit: 2000Mi
            request: 1000Mi
            target: 80
          description: Memory details
          title: Memory
      title: Resources
      type: object
    ResourcesPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        cpu:
          allOf:
          - $ref: '#/components/schemas/Cpu'
          description: CPU details
          title: Cpu
        memory:
          allOf:
          - $ref: '#/components/schemas/Memory'
          description: Memory details
          title: Memory
      title: ResourcesPatch
      type: object
    Routing:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        shadows:
          default: []
          description: Routing shadow
          items:
            $ref: '#/components/schemas/ShadowsModel'
          title: Shadows
          type: array
        targets:
          default: []
          description: Routing targets
          items:
            $ref: '#/components/schemas/TargetsModel'
          title: Targets
          type: array
      title: Routing
      type: object
    ShadowsGet:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        description:
          description: Model description
          title: Description
          type: string
        model_id:
          description: Model ID
          title: Model Id
          type: string
        name:
          description: Model name
          title: Name
          type: string
        version:
          description: Model version
          title: Version
          type: string
      required:
      - name
      - version
      - description
      - model_id
      title: ShadowsGet
      type: object
    ShadowsModel:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        model_id:
          description: Model id
          title: Model Id
          type: string
      required:
      - model_id
      title: ShadowsModel
      type: object
    TargetsGet:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        description:
          description: Model description
          title: Description
          type: string
        model_id:
          description: Model ID
          title: Model Id
          type: string
        name:
          description: Model name
          title: Name
          type: string
        prefix:
          description: Model prefix
          title: Prefix
          type: string
        version:
          description: Model version
          title: Version
          type: string
        weight:
          description: Model weight
          title: Weight
          type: integer
      required:
      - name
      - version
      - description
      - model_id
      - weight
      title: TargetsGet
      type: object
    TargetsModel:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        model_id:
          description: Model id
          title: Model Id
          type: string
        prefix:
          description: Model prefix
          pattern: ^[a-z][a-z0-9-]+[a-z0-9]$
          title: Prefix
          type: string
        weight:
          default: 1
          description: Model weight
          minimum: 1.0
          title: Weight
          type: integer
      required:
      - model_id
      title: TargetsModel
      type: object
    TestDetails:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        input:
          default: []
          description: Test inputs
          items: {}
          title: Input
          type: array
        lower_bound:
          default: []
          description: Lower bounds
          items: {}
          title: Lower Bound
          type: array
        upper_bound:
          default: []
          description: Upper bounds
          items: {}
          title: Upper Bound
          type: array
      title: TestDetails
      type: object
    TestDetailsPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        input:
          description: Test input
          items: {}
          title: Input
          type: array
        lower_bound:
          description: Lower bound
          items: {}
          title: Lower Bound
          type: array
        upper_bound:
          description: Upper bound
          items: {}
          title: Upper Bound
          type: array
      title: TestDetailsPatch
      type: object
    TestPut:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      example:
        description: test_description
        details:
          input:
          - 1
          - 2
          - 3
          - 4
          - 5
          lower_bound:
          - 0.0
          - 0.0
          - 0.0
          - 0.0
          - 0.0
          upper_bound:
          - 1.0
          - 2.0
          - 3.0
          - 4.0
          - 5.0
        meta:
          tags:
          - test_tag1
          - test_tag2
        name: test_name
      properties:
        description:
          description: Test description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/TestDetails'
          default:
            input: []
            lower_bound: []
            upper_bound: []
          description: Test details
          title: Details
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__test__Meta'
          default:
            tags: []
          description: Test metadata
          title: Meta
        name:
          description: Test name
          title: Name
          type: string
      required:
      - name
      - description
      title: TestPut
      type: object
    User:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: User ID
          title: ' Id'
          type: string
        email:
          description: User email
          format: email
          title: Email
          type: string
        name:
          description: User name
          title: Name
          type: string
        surname:
          description: User surname
          title: Surname
          type: string
      required:
      - name
      - surname
      - email
      title: User
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
    schemas__mlflow_server__Meta:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        tags:
          description: Mlflow Server tags
          items:
            type: string
          title: Tags
          type: array
      title: Meta
      type: object
    schemas__model__Meta:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        tags:
          default: []
          description: Model tags
          items:
            type: string
          title: Tags
          type: array
      title: Meta
      type: object
    schemas__model__Test:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        id:
          description: Test id
          items:
            type: string
          title: Id
          type: array
        schedule:
          description: Test schedule
          title: Schedule
          type: string
      title: Test
      type: object
    schemas__model__TestPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        id:
          description: Test id
          items:
            type: string
          title: Id
          type: array
        schedule:
          description: Test schedule
          title: Schedule
          type: string
      title: TestPatch
      type: object
    schemas__pool__Meta:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        tags:
          default: []
          description: Pool tags
          items:
            type: string
          title: Tags
          type: array
      title: Meta
      type: object
    schemas__pool__Test:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        id:
          description: Test id
          items:
            type: string
          title: Id
          type: array
        schedule:
          description: Test schedule
          title: Schedule
          type: string
      title: Test
      type: object
    schemas__pool__TestPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        id:
          description: Test id
          items:
            type: string
          title: Id
          type: array
        schedule:
          description: Test schedule
          title: Schedule
          type: string
      title: TestPatch
      type: object
    schemas__test__Meta:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        tags:
          default: []
          description: Test tags
          items:
            type: string
          title: Tags
          type: array
      title: Meta
      type: object
    schemas__test__Test:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        _id:
          description: Test ID
          title: ' Id'
          type: string
        description:
          description: Test description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/TestDetails'
          description: Test details
          title: Details
        meta:
          allOf:
          - $ref: '#/components/schemas/CommonMeta'
          description: Test metadata
          title: Meta
        name:
          description: Test name
          title: Name
          type: string
      required:
      - name
      - description
      - details
      - meta
      title: Test
      type: object
    schemas__test__TestPatch:
      description: 'Base schema class for Pydantic models

        It should be used as base class for all Pydantic models

        Sets common config for all models'
      properties:
        description:
          description: Test description
          title: Description
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/TestDetailsPatch'
          description: Test details
          title: Details
        meta:
          allOf:
          - $ref: '#/components/schemas/schemas__test__Meta'
          description: Test metadata
          title: Meta
        name:
          description: Test name
          title: Name
          type: string
      title: TestPatch
      type: object
  securitySchemes:
    JWTBearer:
      scheme: bearer
      type: http
info:
  description: Backend Service for the Tyro Platform
  title: "TyroML \U0001F996"
  version: 0.2.0
openapi: 3.0.2
paths:
  /:
    get:
      operationId: root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Root
  /api/mlflow-server/:
    get:
      description: 'Retrieves a list of mlflow server with pagination options (skip,
        limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Mlflow server not found!" message

        if the specified range of gate ID''s does not exist in the database.


        :return: a list of mlflow server data, where skip < mlflow_server_id < limit'
      operationId: get_mlflow_servers_api_mlflow_server__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MlflowServer'
                title: Response Get Mlflow Servers Api Mlflow Server  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Mlflow Servers
      tags:
      - mlflow-server
    put:
      description: 'Creates a new mlflow server with the given information

        and returns the mlflow server information.


        :param mlflow_server_data: the information of the new mlflow server to be
        created.

        :param db: Database session


        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name for mlflow server already exists in the database


        :return: the newly-inserted mlflow server record'
      operationId: put_mlflow_server_api_mlflow_server__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MlflowServerPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MlflowServer'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Put Mlflow Server
      tags:
      - mlflow-server
  /api/mlflow-server/{mlflow_server_id}:
    delete:
      description: 'Deletes the mlflow server with the specified email.


        :param id: The id of the mlflow server to be deleted.

        :param db: Database session


        :raise HTTPException: 404 status code with "Mlflow server not found!" message

        if the specified mlflow server ID does not exist in the database.


        :return: the updated mlflow server record'
      operationId: delete_mlflow_server_api_mlflow_server__mlflow_server_id__delete
      parameters:
      - in: path
        name: mlflow_server_id
        required: true
        schema:
          title: Mlflow Server Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Delete Mlflow Server
      tags:
      - mlflow-server
    get:
      description: 'Retrieves the information of a specific mlflow server by ID.


        :param mlflow_server_id: the mlflow server ID to retrieve

        :param db: Database session


        :raise HTTPException: 404 status code with "Mlflow server not found!" message

        if the specified gate ID does not exist in the database.


        :return: the mlflow server data corresponding to the given ID'
      operationId: get_mlflow_server_api_mlflow_server__mlflow_server_id__get
      parameters:
      - in: path
        name: mlflow_server_id
        required: true
        schema:
          title: Mlflow Server Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MlflowServer'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Mlflow Server
      tags:
      - mlflow-server
    patch:
      description: 'Updates the information of an existing mlflow server with the
        provided data and

        returns the updated mlflow server information.


        :param mlflow_server_id: the mlflow server ID to patch

        :param mlflow_server_data: the information of the new mlflow server to be
        created.

        :param db: Database session


        :raise HTTPException: 404 status code with "Mlflow server not found!" message

        if the specified mlflow server ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name for mlflow server already exists in the database


        :return: the updated mlflow server record'
      operationId: patch_mlflow_server_api_mlflow_server__mlflow_server_id__patch
      parameters:
      - in: path
        name: mlflow_server_id
        required: true
        schema:
          title: Mlflow Server Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MlflowServerPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MlflowServer'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Mlflow Server
      tags:
      - mlflow-server
  /api/model/:
    get:
      description: 'Retrieves a list of models with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified range of model ID''s does not exist in the database.


        :return: a list of model data, where skip < model_id < limit'
      operationId: get_models_api_model__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelGet'
                title: Response Get Models Api Model  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Models
      tags:
      - model
    put:
      description: 'Creates a new model with the given information and returns the
        model information.


        :param model_data: the information of the new model to be created.

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the newly-inserted model record'
      operationId: put_model_api_model__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Put Model
      tags:
      - model
  /api/model/{model_id}:
    delete:
      description: 'Deletes the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: delete_model_api_model__model_id__delete
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Delete Model
      tags:
      - model
    get:
      description: 'Retrieves the information of a specific model by ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.


        :return: the model data corresponding to the given ID'
      operationId: get_model_api_model__model_id__get
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Model
      tags:
      - model
    patch:
      description: 'Allows updating a model by it''s id


        :param model_id: id of model to update

        :param model_data: JSON fields with new values to update a model

        model is not found

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: updated model'
      operationId: patch_model_api_model__model_id__patch
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Model
      tags:
      - model
  /api/model/{model_id}/tests:
    get:
      description: 'Retrieves the information about the tests of a specific model
        by ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the pool tests data corresponding to the given ID'
      operationId: get_model_tests_api_model__model_id__tests_get
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas__model__Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Model Tests
      tags:
      - model
    patch:
      description: 'Updates the test of the given model ID.


        :param model_id: model ID

        :param test_data: the information of the new test to be created.

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified model ID does not exist in the database.


        :return: the model data corresponding to the given ID'
      operationId: patch_model_tests_api_model__model_id__tests_patch
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schemas__model__TestPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Model Tests
      tags:
      - model
  /api/model/{model_id}/{version}:
    delete:
      description: 'Deletes the model version


        :param model_id: model ID

        :param version: model version

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.


        :return: a json with a detail key indicating success'
      operationId: delete_model_version_api_model__model_id___version__delete
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      - in: path
        name: version
        required: true
        schema:
          pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
          title: Version
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Delete Model Version
      tags:
      - model
    patch:
      description: 'Allows updating a model''s version


        :param model_id: id of model to update

        :param version: version of model to update

        :param model_data: JSON fields with new values to update a model

        model is not found

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 409 status code with "Version already registered"

        message if the provided version already exists in the database.


        :return: updated model'
      operationId: patch_model_version_api_model__model_id___version__patch
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      - in: path
        name: version
        required: true
        schema:
          pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
          title: Version
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Model Version
      tags:
      - model
  /api/model/{model_id}/{version}/build:
    post:
      description: 'Builds container of the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!"

        :raise HTTPException: 409 status code with "Model is not inactive!"

        :raise HTTPException: 404 status code with "Model details not found!"

        :raise HTTPException: 406 status code with "Model details are not complete!"


        :return: a json with a "detail" key indicating success'
      operationId: build_model_api_model__model_id___version__build_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      - in: path
        name: version
        required: true
        schema:
          pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
          title: Version
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Build Model
      tags:
      - model
  /api/model/{model_id}/{version}/deactivate:
    post:
      description: 'Deactivates the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        :raise HTTPException: 409 status code with "Model already inactive!" message

        :raise HTTPException: 409 status code with "Model is not deployed!" message


        :return: a json with a "detail" key indicating success'
      operationId: deactivate_model_api_model__model_id___version__deactivate_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      - in: path
        name: version
        required: true
        schema:
          pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
          title: Version
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Deactivate Model
      tags:
      - model
  /api/model/{model_id}/{version}/deploy:
    post:
      description: 'Activates the model with the given ID.


        :param model_id: model ID

        :param version: model version

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!"

        :raise HTTPException: 406 status code with "Model image is not built"


        :return: a json with a "detail" key indicating success'
      operationId: deploy_model_api_model__model_id___version__deploy_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: string
      - in: path
        name: version
        required: true
        schema:
          pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
          title: Version
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Deploy Model
      tags:
      - model
  /api/pool/:
    get:
      description: 'Retrieves a list of pools with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified range of pool ID''s does not exist in the database.


        :return: a list of pool data, where skip < pool_id < limit'
      operationId: get_pools_api_pool__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                title: Response Get Pools Api Pool  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Pools
      tags:
      - pool
    put:
      description: 'Creates a new pool with the given information and returns the
        pool information.


        :param pool_data: the information of the new pool to be created.

        :param db: Database session

        :param credentials: JWT token


        :return: the newly-inserted pool record'
      operationId: put_pool_api_pool__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Put Pool
      tags:
      - pool
  /api/pool/{pool_id}:
    delete:
      description: 'Deletes the pool with the given ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: delete_pool_api_pool__pool_id__delete
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Delete Pool
      tags:
      - pool
    get:
      description: 'Retrieves the information of a specific pool by ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the pool data corresponding to the given ID'
      operationId: get_pool_api_pool__pool_id__get
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Pool
      tags:
      - pool
    patch:
      description: 'Updates the information of an existing pool with the provided
        data and

        returns the updated pool information.


        :param pool_data: the information of the new pool to be created.

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the updated pool record'
      operationId: patch_pool_api_pool__pool_id__patch
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Pool
      tags:
      - pool
  /api/pool/{pool_id}/deactivate:
    post:
      description: 'Deactivates the pool with the given ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: deactivate_pool_api_pool__pool_id__deactivate_post
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Deactivate Pool
      tags:
      - pool
  /api/pool/{pool_id}/deploy:
    post:
      description: 'Deploy the pool with the given ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: deploy_pool_api_pool__pool_id__deploy_post
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Deploy Pool
      tags:
      - pool
  /api/pool/{pool_id}/models/:
    get:
      description: 'Retrieves the detailed informations about models in the pool


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: Detailed informations about models in the pool'
      operationId: get_pool_models_api_pool__pool_id__models__get
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolModelGet'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Get Pool Models
      tags:
      - pool
      - pool-models
    patch:
      description: 'Allows to add/patch many models to the pool


        :param pool_id: pool ID

        :param details: information about models to be added to the pool

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the updated pool record'
      operationId: patch_pool_model_api_pool__pool_id__models__patch
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolModelPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Pool Model
      tags:
      - pool
      - pool-models
  /api/pool/{pool_id}/tests:
    get:
      description: 'Retrieves the information about the tests of a specific pool by
        ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the pool data corresponding to the given ID'
      operationId: get_pool_tests_api_pool__pool_id__tests_get
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas__pool__Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Pool Tests
      tags:
      - pool
    patch:
      description: 'Updates the test of the given pool ID.


        :param pool_id: pool ID

        :param test_data: the information of the new test to be created.

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the pool data corresponding to the given ID'
      operationId: patch_pool_tests_api_pool__pool_id__tests_patch
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schemas__pool__TestPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Pool Tests
      tags:
      - pool
  /api/test/:
    get:
      operationId: get_tests_api_test__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/schemas__test__Test'
                title: Response Get Tests Api Test  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Tests
      tags:
      - test
    put:
      description: 'Creates a new test with the given information and returns the
        test information.


        :param test: test data

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 409 status code with "Name already registered" message

        if the specified test name already exists in the database.


        :return: the newly-inserted test record'
      operationId: put_test_api_test__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas__test__Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Put Test
      tags:
      - test
  /api/test/{test_id}:
    delete:
      description: 'Deletes a specific test by ID.


        :param test_id: test ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified test ID does not exist in the database.


        :return: the deleted test record'
      operationId: delete_test_api_test__test_id__delete
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Delete Test
      tags:
      - test
    get:
      operationId: get_test_api_test__test_id__get
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas__test__Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Test
      tags:
      - test
    patch:
      description: 'Updates the information of a specific test by ID and returns

        the updated test information.


        :param test_id: test ID

        :param test: test data

        :param db: Database session

        :param credentials: JWT token


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified test ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered" message

        if the specified test name already exists in the database


        :return: the updated test record'
      operationId: patch_test_api_test__test_id__patch
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schemas__test__TestPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas__test__Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      - JWTBearer: []
      summary: Patch Test
      tags:
      - test
  /api/user/:
    get:
      description: 'Retrieves a list of users with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :return: a list of user data, where skip <= user_id < limit'
      operationId: get_users_api_user__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Get Users Api User  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get Users
      tags:
      - user
  /api/user/{user_id}:
    get:
      description: 'Retrieves a user with the specified ID.


        :param db: Database session

        :param user_id: the ID of the user to retrieve


        :raise HTTPException: 404 status code with "User not found!" message

        if the specified user ID does not exist in the database.


        :return: the user data'
      operationId: get_user_api_user__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - JWTBearer: []
      summary: Get User
      tags:
      - user
  /auth:
    get:
      operationId: auth_auth_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Auth
      tags:
      - login
  /login:
    get:
      operationId: login_login_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Login
      tags:
      - login
